groups:
  - name: ferlease
    jobs:
      - release-open-pr
      - teardown-closed-merged-pr

  - name: multi-feature-branch
    jobs:
      - set-feature-pipelines
  - name: update-pipeline
    jobs:
      - update-pipeline
  - name: prescription-ui-cypress
    jobs:
      - run-cypress-tests-prescription-ui    

resource_types:
- name: time
  type: registry-image
  source:
    repository: concourse/time-resource

- name: git
  type: registry-image
  source:
    repository: concourse/git-resource
    username: ((docker.username))
    password: ((docker.password))

- name: git-branches
  type: registry-image
  source:
    repository: aoldershaw/git-branches-resource
    username: ((docker.username))
    password: ((docker.password))
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource
    username: ((docker.username))
    password: ((docker.password))
    
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    username: ((docker.username))
    password: ((docker.password))
    tag: latest

resources:
# Cypress
- name: daily-schedule
  type: time
  check_every: 30s
  source:
    interval: 24h
    start: "03:00 AM"
    stop: "04:30 AM"
    location: "America/Toronto"
    days: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]

- name: slack-alert-cypress
  type: slack-notification
  source:
    url: ((slack.webhook-url-cypress))

- name: git-prescription-ui-cypress
  type: git
  icon: github
  check_every: 30s
  webhook_token: ((webhook-token))
  source:
    uri: git@github.com:Ferlab-Ste-Justine/clin-prescription-ui.git
    branch: main
    private_key: ((git.ssh-key))
    # ignore_paths: [ci/]

- name: minio-storage
  type: s3
  source:
    endpoint: https://s3.cqgc.hsj.rtss.qc.ca
    bucket: cqgc-qa-cypress-tests
    access_key_id: "((minio.access_key))"
    secret_access_key: ((minio.secret_key))
    use_ssl: false  # Set to true if MinIO is configured with SSL
    regexp: test-results/merged-results-.*\.xml

# Ferlease
- name: slack-alert
  type: slack-notification
  source:
    url: ((slack.webhook-url))

- name: feature-branches
  type: git-branches
  check_every: 30s
  source:
    uri: git@github.com:Ferlab-Ste-Justine/clin-prescription-ui.git
    private_key: ((git.ssh-key))
    # The "(?P<name>pattern)" syntax defines a named capture group.
    # aoldershaw/git-branches-resource emits the value of each named capture
    # group under the `groups` key.
    #
    # e.g. feature/some-feature ==> {"groups": {"feature": "some-feature"}}
    # branch_regex: 'feature/(?P<feature>.*)'
    branch_regex: '(feat|fix|refactor|perf)(?:\/)(?P<feature>[a-z]{2,8}-[0-9]+[a-z0-9\-]*)$'           

- name: git-prescription-ui
  type: git
  icon: github
  check_every: 30s
  webhook_token: ((webhook-token))
  source:
    uri: git@github.com:Ferlab-Ste-Justine/clin-prescription-ui.git
    branch: main
    private_key: ((git.ssh-key))
    # ignore_paths: [ci/]

- name: ci-folder
  type: git
  check_every: 30s
  source:
    uri: git@github.com:Ferlab-Ste-Justine/clin-prescription-ui.git
    branch: main
    paths: [ci]
    private_key: ((git.ssh-key))

- name: open-pull-request
  type: pull-request
  check_every: 30s
  webhook_token: ((webhook-token))
  source:
    base_branch: main
    repository: Ferlab-Ste-Justine/clin-prescription-ui
    access_token: ((git.access-token))
    states: ["OPEN"]
    # labels: ["bug"]

- name: closed-pull-request
  type: pull-request
  check_every: 30s
  webhook_token: ((webhook-token))
  source:
    base_branch: main
    repository: Ferlab-Ste-Justine/clin-prescription-ui
    access_token: ((git.access-token))
    states: ["CLOSED", "MERGED"]

- name: ferlease
  type: docker-image
  icon: docker
  source:
    username: "((docker.username))"
    password: ((docker.password))
    repository: ferlabcrsj/ferlease
    tag: 0.2.2

jobs:
- name: run-cypress-tests-prescription-ui  
  plan:
    - get: daily-schedule
      trigger: true
    - get: git-prescription-ui-cypress
      trigger: true
      params: { submodule_recursive: true }
    - task: prepare-and-run-cypress
      params:
        CYPRESS_PASSWORD: ((cypress.password))
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: ferlabcrsj/cypress-included-custom 
            tag: latest
        inputs:
          - name: git-prescription-ui-cypress
        outputs:
          - name: test-results
          - name: timestamp
        run:
          path: bash
          args:
            - -c
            - |
              set -e # Exit on error

              # Navigate to the project directory
              pushd git-prescription-ui-cypress

              # Install dependencies
              npm install
              # npm install --save-dev junit-merge

              # Copy env-qa to .env
              cp env-qa .env

              # Update the .env file with the Cypress password
              sed -i 's/CYPRESS_PASSWORD=""/CYPRESS_PASSWORD="'$CYPRESS_PASSWORD'"/' .env

              # Run Cypress tests
              npx cypress run --config-file cypress.config.ts --config retries=2 --browser chrome --reporter junit --reporter-options "mochaFile=test-results/results-[hash].xml" --spec "cypress/e2e/**/*.cy.{js,jsx,ts,tsx}"
              
              # Run only the first Cypress test
              # FIRST_TEST=$(ls cypress/e2e/**/*.cy.{js,jsx,ts,tsx} | head -n 1)
              # npx cypress run --config-file cypress.config.ts --config retries=2 --browser chrome --reporter junit --reporter-options "mochaFile=test-results/results-[hash].xml" --spec "$FIRST_TEST"
             
              # Generate a timestamp
              TIMESTAMP=$(date +%Y%m%d%H%M%S)
              echo $TIMESTAMP > ../timestamp/timestamp.txt

              # Merge the XML files using junit-merge
              npx junit-merge test-results/results-*.xml -o ../test-results/merged-results-${TIMESTAMP}.xml

              popd

    - put: minio-storage
      params:
        file: test-results/merged-results-*.xml
      no_get: true

    - task: generate-presigned-url
      params:
        MINIO_ACCESS_KEY: ((minio.access_key))
        MINIO_SECRET_KEY: ((minio.secret_key))
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: ferlabcrsj/cypress-included-custom 
            tag: latest
        inputs:
          - name: timestamp
        outputs:
          - name: slack-data
        run:
          path: sh
          args:
            - -c
            - |
              set -e  # Exit on error

              # Read the timestamp
              TIMESTAMP=$(cat timestamp/timestamp.txt)

              # Generate a pre-signed URL
              mc alias set myminio https://s3.cqgc.hsj.rtss.qc.ca $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
              PRESIGNED_URL=$(mc share download myminio/cqgc-qa-cypress-tests/test-results/merged-results-${TIMESTAMP}.xml --expire=48h | grep -oP '(?<=Share: ).*')

              # Prepare Slack message
              echo '[
                {
                  "color": "good",
                  "title": "Prescription UI Cypress Test Results",
                  "text": "Cypress test results are available for Prescription UI . <'$PRESIGNED_URL'|View Results>"
                }
              ]' > slack-data/attachments.json

  on_success:
    do:
      - put: slack-alert-cypress
        params:
          attachments_file: slack-data/attachments.json

  on_failure:
    do:
      - put: slack-alert-cypress
        params:
          attachments: |
            [
              {
                "color": "danger",
                "title": "Prescription UI Cypress test execution failed!",
                "text": "View build: <${ATC_EXTERNAL_URL}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}|View build>"
              }
            ]
- name: update-pipeline
  plan:
    - get: ci-folder
      trigger: true
    - set_pipeline: self
      file: ci-folder/ci/pipeline.yml

- name: set-feature-pipelines
  plan:
  - in_parallel:
    - get: feature-branches
      trigger: true
    - get: git-prescription-ui
      trigger: true
  - load_var: branches
    file: feature-branches/branches.json
  # Run a step multiple times with different combinations of variable values.
  - across:
    - var: branch
      values: ((.:branches))
    set_pipeline: prescription-ui
    file: git-prescription-ui/ci/template.yml
    instance_vars: {feature: ((.:branch.groups.feature))}
    vars: {branch: ((.:branch.name)), feature-name: ((.:branch.groups.feature))}

- name: release-open-pr
  on_success:
    put: slack-alert
    params:
      channel: '#clin-ferlease'
      attachments_file: output/attachments.json
  on_failure:
    put: slack-alert
    params:
      channel: '#clin-ferlease'
      attachments_file: output/attachments-fail.json
  plan:
  - get: open-pull-request
    trigger: true
    version: every
  - get: ferlease
  - task: generate-config-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: concourse/git-resource
      inputs:
      - name: open-pull-request
      outputs:
        - name: output
      run:
        path: bash
        # dir: pull-request
        args:
        - -c
        - |
          #!/bin/bash
          set -e
          set +x
          pushd open-pull-request
            branchName=$(cat .git/resource/head_name)
            releaseName=$(echo $branchName | cut -d "/" -f2)
            prTitle=$(jq -r '.[] | select(.name == "title") | .value' .git/resource/metadata.json)
            pullRequestTitleWithoutPrefix=$(echo "$prTitle" | sed 's/^Feat\///')
          popd
          cat > ./output/attachments.json <<EOL
          [
            {
              "title": "New Prescription UI Release : Ticket: $pullRequestTitleWithoutPrefix",
              "text": " You can find the new release for prescription UI at https://prescription-ui-$releaseName.qa.cqgc.hsj.rtss.qc.ca",
              "color": "good"
            }
          ]
          EOL
          cat > ./output/attachments-fail.json <<EOL
          [
            {
              "title": "The branch $branchName may contain special characters or uppercase letters",
              "text": " The release failed to deploy, please check the branch name or conflicts",
              "color": "danger"
            }
          ]
          EOL
          if ! [[ "$branchName" =~ ^(feat|fix|refactor|perf)(\/)([a-z]{2,8}-[0-9]+[a-z0-9\-]*)$ ]]
          then
            echo "Le nom de branche contient des Caractères spéciaux ou des lettres majiscules !"
            exit 1
          fi
          cat > ./output/config.yml <<EOL
            service: prescription-ui
            release: $releaseName
            environment: "qa"
            repo: "git@github.com:Ferlab-Ste-Justine/cqgc-pre-prod-kubernetes-environments.git"
            ref: main
            git_auth:
              ssh_key: "id_rsa"
              known_key: "known_host"
            author:
              name: ferlab-automation
              email: automation@ferlab.bio
            template_directory: "{{.RepoDir}}/ferlease-templates/{{.Service}}"
            commit_message: "{{ if eq .Operation \"release\" }}Adding{{ else }}Removing{{ end }} release {{.Release}} of service {{.Service}}"
            push_retries: 60
            push_retry_interval: "5s"
          EOL
  - task: ferlease
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: concourse/git-resource
      inputs:
      - name: output
      - name: ferlease
      outputs:
        - name: output
      params:
        SSH_KEY: ((git.ssh-key))
        KNOWN_HOST: ((git.known-host))
      run:
        path: bash
        # dir: pull-request
        args:
        - -c
        - |
          #!/bin/bash
          set -e
          set +x
          echo "$SSH_KEY" > id_rsa
          echo "$KNOWN_HOST" > known_host
          ./ferlease/rootfs/bin/ferlease release -c output/config.yml

- name: teardown-closed-merged-pr
  plan:
  - get: closed-pull-request
    trigger: true
    version: every
  - get: ferlease
  - task: generate-config-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: concourse/git-resource
      inputs:
      - name: closed-pull-request
      outputs:
        - name: output
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -e
          set +x
          pushd closed-pull-request
            branchName=$(cat .git/resource/head_name)
            releaseName=$(echo $branchName | cut -d "/" -f2)
          popd
          cat > ./output/config.yml <<EOL
            service: prescription-ui
            release: $releaseName
            environment: "qa"
            repo: "git@github.com:Ferlab-Ste-Justine/cqgc-pre-prod-kubernetes-environments.git"
            ref: main
            git_auth:
              ssh_key: "id_rsa"
              known_key: "known_host"
            author:
              name: ferlab-automation
              email: automation@ferlab.bio
            template_directory: "{{.RepoDir}}/ferlease-templates/{{.Service}}"
            commit_message: "{{ if eq .Operation \"release\" }}Adding{{ else }}Removing{{ end }} release {{.Release}} of service {{.Service}}"
            push_retries: 60
            push_retry_interval: "5s"
          EOL
  - task: ferlease
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: concourse/git-resource
      inputs:
      - name: output
      - name: ferlease
      params:
        SSH_KEY: ((git.ssh-key))
        KNOWN_HOST: ((git.known-host))
      run:
        path: bash
        # dir: pull-request
        args:
        - -c
        - |
          #!/bin/bash
          set -e
          set +x
          echo "$SSH_KEY" > id_rsa
          echo "$KNOWN_HOST" > known_host
          ./ferlease/rootfs/bin/ferlease teardown -c output/config.yml
